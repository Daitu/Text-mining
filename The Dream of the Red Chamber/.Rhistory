freq$word <- as.factor(freq$word)
head(freq)
nn <- 250
sum(freq$freq>=nn)
freq[freq$freq >= nn,] %>%
ggplot(aes(x = word,y = freq)) +
theme_bw(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "red",alpha = 1) +
scale_x_discrete() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
labs(x = "Word",y = "freq",title = "Red Dream")
freq[freq$freq >= nn,] %>%
ggplot(aes(x = word,y = freq)) +
theme_bw(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
scale_x_discrete() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
labs(x = "Word",y = "freq",title = "Red Dream")
sum(freq$freq>=60)
data.frame(freq[freq$freq>60,]) %>%
letterCloud("R",wordSize = 12)
sum(freq$word %in% Red_man)
man_freq <- freq[freq$word %in% Red_man,]
summary(man_freq)
nn <- 250
sum(man_freq$freq>=nn)
freq[man_freq$freq >= nn,] %>%
ggplot(aes(x = word,y = freq)) +
theme_bw(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
scale_x_discrete() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
labs(x = "Word",y = "freq",title = "Red Dream")
sum(man_freq$freq>=nn)
man_freq[man_freq$freq >= nn,] %>%
ggplot(aes(x = word,y = freq)) +
theme_bw(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
scale_x_discrete() +
theme(axis.text.x = element_text(angle = 90,hjust = 1,size = 8)) +
labs(x = "Word",y = "freq",title = "Red Dream")
nn <- 100
sum(man_freq$freq>=nn)
man_freq[man_freq$freq >= nn,] %>%
ggplot(aes(x = word,y = freq)) +
theme_bw(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
scale_x_discrete() +
theme(axis.text.x = element_text(angle = 90,hjust = 1,size = 8)) +
labs(x = "Word",y = "freq",title = "Red Dream")
man_freq[man_freq$freq >= nn,] %>%
ggplot(aes(x = reorder(word,freq),y = freq)) +
theme_bw(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
scale_x_discrete() +
theme(axis.text.x = element_text(angle = 90,hjust = 1,size = 8)) +
labs(x = "Word",y = "freq",title = "Red Dream")
man_freq[man_freq$freq >= nn,] %>%
ggplot(aes(x = reorder(word,freq),y = freq)) +
theme_bw(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
scale_x_discrete() +
theme(axis.text.x = element_text(angle = 90,hjust = 1,size = 9)) +
labs(x = "Word",y = "freq",title = "Red Dream")
man_freq[man_freq$freq >= nn,] %>%
ggplot(aes(x = reorder(word,freq),y = freq)) +
theme_gray(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
theme(axis.text.x = element_text(angle = 90,hjust = 1,size = 9)) +
labs(x = "Word",y = "freq",title = "Red Dream")
freq[freq$freq >= nn,] %>%
ggplot(aes(x = word,y = freq)) +
theme_gray(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
scale_x_discrete() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
labs(x = "Word",y = "freq",title = "Red Dream")
man_freq[man_freq$freq >= nn,] %>%
ggplot(aes(x = reorder(word,freq),y = freq)) +
theme_gray(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
theme(axis.text.x = element_text(angle = 90,hjust = 1,size = 9)) +
labs(x = "Word",y = "freq",title = "Red Dream")
data.frame(man_freq[word_freq$freq>60,]) %>%
wordcloud2(color = 'random-dark',backgroundColor = "white",
shape = 'star' )
data.frame(man_freq[wman_freq$freq>60,]) %>%
wordcloud2(color = 'random-dark',backgroundColor = "white",
shape = 'star' )
data.frame(man_freq[man_freq$freq>60,]) %>%
wordcloud2(color = 'random-dark',backgroundColor = "white",
shape = 'star' )
data.frame(man_freq[man_freq$freq>60,]) %>%
wordcloud2(color = 'random-dark',backgroundColor = "white",
shape =  'diamond' )
data.frame(man_freq[man_freq$freq>10,]) %>%
wordcloud2(color = 'random-dark',backgroundColor = "white",
shape =  'diamond' )
dtm_tfr <- removeSparseTerms(dtm,0.95)
dtm_tfr
dtmmat <- as.matrix(dtm_tfr)
Red_dtm_tfidfr_dist <- proxy::dist(Red_dtm_tfidfr_mat,method ="cosine")
dtmmat_dist <- proxy::dist(dtmmat,method ="cosine")
clust <- hclust(d = dtmmat_dist,method = "ward.D2")
Den <- as.dendrogram(clust)
attr(d, 'nodePar') <- list(Group=Red_dreamname[as.integer(attr(d, 'label')),10])
Den <- dendrapply(Den, function(d) {
if(is.leaf(d))
attr(d, 'nodePar') <- list(Group=dreamname[as.integer(attr(d, 'label')),10])
d
})
ggraph(graph = Red_Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes() +
theme_bw(base_family = "STKaiti")
library(ggraph)
ggraph(graph = Red_Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes() +
theme_bw(base_family = "STKaiti")
ggraph(graph = Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes() +
theme_bw(base_family = "STKaiti")
View(dreamname)
dreamname$Group <- factor(rep(c(1,2),times = c(80,40)),
labels = c("前80章","后40章"))
Den <- dendrapply(Den, function(d) {
if(is.leaf(d))
attr(d, 'nodePar') <- list(Group=dreamname[as.integer(attr(d, 'label')),10])
d
})
ggraph(graph = Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes() +
theme_bw(base_family = "STKaiti")
clust
Den <- as.dendrogram(clust)
Den
dreamname$Group <- factor(rep(c(1,2),times = c(80,40)),
labels = c("前80章","后40章"))
attr(d, 'nodePar') <- list(Group=dreamname[as.integer(attr(d, 'label')),7])
attr(d, 'nodePar') <- list(Group=dreamname[as.integer(attr(d, 'label')),7])
Den <- dendrapply(Den, function(d) {
if(is.leaf(d))
attr(d, 'nodePar') <- list(Group=dreamname[as.integer(attr(d, 'label')),7])
d
})
ggraph(graph = Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes() +
theme_bw(base_family = "STKaiti")
ggraph(graph = Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes() +
ggraph(graph = Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes() +
)
ggraph(graph = Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes() +
dtmmat_dist <- proxy::dist(dtmmat,method ="cosine")
clust <- hclust(d = dtmmat_dist,method = "ward.D2")
clust
Den <- as.dendrogram(clust)
dreamname$Group <- factor(rep(c(1,2),times = c(80,40)),
labels = c("前80","后40"))
Den <- dendrapply(Den, function(d) {
if(is.leaf(d))
attr(d, 'nodePar') <- list(Group=dreamname[as.integer(attr(d, 'label')),7])
d
})
ggraph(graph = Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes()
dreamname$Group <- factor(rep(c(1,2),times = c(80,40)),
labels = c("F80","H40"))
Den <- dendrapply(Den, function(d) {
if(is.leaf(d))
attr(d, 'nodePar') <- list(Group=dreamname[as.integer(attr(d, 'label')),7])
d
})
ggraph(graph = Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes()
library(RTextTools)
trainsize <- c(1:60,80:100)
trainsize
testsize <- c(61:79,101:120)
testsize
containersvm <- create_container(dtm_tfr,labels = dreamname$Group,
trainSize = trainsize,
testSize = testsize,
virgin=FALSE)
system.time({
SLDA <- train_model(containersvm,"SLDA")
})
system.time({
SLDA_class <- classify_model(containersvm,SLDA)
})
analytics <- create_analytics(containersvm,SLDA_class)
dtm_tfr
dtm_tfr <- removeSparseTerms(dtm,0.9)
dtm_tfr
trainsize <- c(1:60,80:100)
testsize <- c(61:79,101:120)
containersvm <- create_container(dtm_tfr,labels = dreamname$Group,
trainSize = trainsize,
testSize = testsize,
virgin=FALSE)
system.time({
SLDA <- train_model(containersvm,"SLDA")
})
system.time({
GLMNET <- train_model(containersvm,"GLMNET")
})
GLMNET_class <- classify_model(containersvm,GLMNET)
analytics <- create_analytics(containersvm,SLDA_class)
containersvm
GLMNET
GLMNET_class
GLMNET_class <- classify_model(containersvm,GLMNET)
create_analytics(containersvm,SLDA_class)
analytics <- create_analytics(containersvm,SLDA_class)
summary(analytics)
analytics <- create_analytics(containersvm,GLMNET_class)
GLMNET_class
analytics <- create_analytics(containersvm,GLMNET_class)
data(NYTimes)
data <- NYTimes[sample(1:3100,size=100,replace=FALSE),]
matrix <- create_matrix(cbind(data["Title"],data["Subject"]), language="english",
removeNumbers=TRUE, stemWords=FALSE, weighting=tm::weightTfIdf)
container <- create_container(matrix,data$Topic.Code,trainSize=1:75, testSize=76:100,
virgin=FALSE)
models <- train_models(container, algorithms=c("MAXENT","SVM"))
results <- classify_models(container, models)
results
analytics <- create_analytics(container, results)
analytics
table(dreamname$Group[testsize],GLMNET_class$GLMNET_LABEL)
setwd("/Users/daitu/数据分析/订单/Red Dream2")
getwd()
library(jiebaR)
library(tm)
library(readr)
library(stringr)
library(plyr)
library(ggplot2)
library(wordcloud2)
library(ggraph)
library(RTextTools)
mystopwords <- readLines("停用词.txt")
dream <- readLines("红楼梦01.txt",encoding='UTF-8')
man <- readLines("红楼梦人物.txt",encoding='UTF-8')
dream <- dream[!nchar(dream) == 0]
dreamname <- data.frame(name = dream[grep(dream,pattern = "^第+.+回")],
chapter = 1:120)
names <- data.frame(str_split(dreamname$name,pattern = " ",simplify =TRUE))
dreamname$chapter2 <- names$X1
dreamname$Name <- apply(names[,2:3],1,str_c,collapse = ",")
dreamname$chapbegin<- grep(dream,pattern = "^第+.+回")
dreamname$chapend <- c((dreamname$chapbegin-1)[-1],length(dream))
for (ii in 1:nrow(dreamname)) {
## 将内容使用句号连接
chapstrs <- str_c(dream[(dreamname$chapbegin[ii]+1):dreamname$chapend[ii]],collapse = "")
## 剔除不必要的空格
dreamname$content[ii] <- str_replace_all(chapstrs,pattern = "[[:blank:]]",replacement = "")
}
content <- dreamname$content
dreamname$content <- NULL
fen <- jiebaR::worker(type = "query",user = "红楼梦词典.txt")
red <- apply_list(as.list(content),fen)
red <- lapply(red, filter_segment,filter_words=mystopwords)
red[[1]][1:100]
c <- Corpus(VectorSource(red))
dtm <- DocumentTermMatrix(c,control = list(wordLengths=c(1,Inf)))
dtm
freq <- sort(colSums(as.matrix(dtm)),decreasing = TRUE)
freq <- data.frame(word = names(freq),freq=freq,row.names = NULL)
freq$word <- as.factor(freq$word)
head(freq)
nn <- 250
sum(freq$freq>=nn)
freq[freq$freq >= nn,] %>%
ggplot(aes(x = word,y = freq)) +
theme_gray(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
scale_x_discrete() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
labs(x = "Word",y = "freq",title = "Red Dream")
sum(freq$freq>=60)
data.frame(freq[freq$freq>60,]) %>%
letterCloud("R",wordSize = 12)
sum(freq$word %in% Red_man)
man_freq <- freq[freq$word %in% Red_man,]
sum(freq$word %in% man)
man_freq <- freq[freq$word %in% man,]
summary(man_freq)
nn <- 100
sum(man_freq$freq>=nn)
man_freq[man_freq$freq >= nn,] %>%
ggplot(aes(x = reorder(word,freq),y = freq)) +
theme_gray(base_size = 12,base_family = "STKaiti") +
geom_bar(stat = "identity",fill= "red",colour = "blue",alpha = 1) +
theme(axis.text.x = element_text(angle = 90,hjust = 1,size = 9)) +
labs(x = "Word",y = "freq",title = "Red Dream")
data.frame(man_freq[man_freq$freq>10,]) %>%
wordcloud2(color = 'random-dark',backgroundColor = "white",
shape =  'diamond' )
dtm_tfr <- removeSparseTerms(dtm,0.95)
dtm_tfr
dtmmat <- as.matrix(dtm_tfr)
dtmmat_dist <- proxy::dist(dtmmat,method ="cosine")
clust <- hclust(d = dtmmat_dist,method = "ward.D2")
clust
Den <- as.dendrogram(clust)
dreamname$Group <- factor(rep(c(1,2),times = c(80,40)),
labels = c("F80","H40"))
Den <- dendrapply(Den, function(d) {
if(is.leaf(d))
attr(d, 'nodePar') <- list(Group=dreamname[as.integer(attr(d, 'label')),7])
d
})
ggraph(graph = Den, layout = 'dendrogram', repel = TRUE, circular = TRUE,
ratio = 0.5) +
geom_edge_elbow() +
geom_node_text(aes(x = x*1.05, y=y*1.05, filter=leaf,
angle = nAngle(x, y), label = label),
size=3, hjust='outward') +
geom_node_point(aes(filter=leaf, color=Group)) +
coord_fixed() +
ggforce::theme_no_axes()
dtm_tfr <- removeSparseTerms(dtm,0.9)
dtm_tfr
trainsize <- c(1:60,80:100)
testsize <- c(61:79,101:120)
containersvm <- create_container(dtm_tfr,labels = dreamname$Group,
trainSize = trainsize,
testSize = testsize,
virgin=FALSE)
system.time({
GLMNET <- train_model(containersvm,"GLMNET")
})
system.time({
GLMNET_class <- classify_model(containersvm,GLMNET)
})
table(dreamname$Group[testsize],GLMNET_class$GLMNET_LABEL)
library(jiebaR)
library(tm)
library(readr)
library(stringr)
library(lda)
library(LDAvis)
filename <- "./数据/我的红楼梦停用词.txt"
mystopwords <- readLines(filename)
filename <-"./数据/红楼梦UTF82.txt"
Red_dream <- readLines(filename,encoding='UTF-8')
Red_dream <- Red_dream[!is.na(Red_dream)]
juan <- grep(Red_dream,pattern = "^第+.+卷")
Red_dream <- Red_dream[(-juan)]
Red_dreamname <- data.frame(name = Red_dream[grep(Red_dream,pattern = "^第+.+回")],
chapter = 1:120)
names <- data.frame(str_split(Red_dreamname$name,pattern = " ",simplify =TRUE))
Red_dreamname$chapter2 <- names$X1
Red_dreamname$Name <- apply(names[,2:3],1,str_c,collapse = ",")
Red_dreamname$chapbegin<- grep(Red_dream,pattern = "^第+.+回")
Red_dreamname$chapend <- c((Red_dreamname$chapbegin-1)[-1],length(Red_dream))
Red_dreamname$chaplen <- Red_dreamname$chapend - Red_dreamname$chapbegin
for (ii in 1:nrow(Red_dreamname)) {
## 将内容使用句号连接
chapstrs <- str_c(Red_dream[(Red_dreamname$chapbegin[ii]+1):Red_dreamname$chapend[ii]],collapse = "")
## 剔除不必要的空格
Red_dreamname$content[ii] <- str_replace_all(chapstrs,pattern = "[[:blank:]]",replacement = "")
}
content <- Red_dreamname$content
Red_dreamname$content <- NULL
Red_dreamname$numchars <- nchar(content)
Red_fen <- jiebaR::worker(type = "mix",user = "./数据/红楼梦词典.txt")
Fen_red <- apply_list(as.list(content),Red_fen)
library(parallel)
cl <- makeCluster(4)
Fen_red <- parLapply(cl = cl,Fen_red, filter_segment,filter_words=mystopwords)
stopCluster(cl)
term.table <- table(unlist(Fen_red))
term.table <- sort(term.table, decreasing = TRUE)
del <- term.table < 10
term.table <- term.table[!del]
vocab <- names(term.table)
get.terms <- function(x) {
index <- match(x, vocab)
index <- index[!is.na(index)]
rbind(as.integer(index - 1), as.integer(rep(1, length(index))))
}
documents <- lapply(Fen_red, get.terms)
D <- length(documents)  # number of documents
W <- length(vocab)  # number of terms in the vocab
doc.length <- sapply(documents, function(x) sum(x[2, ]))  # number of tokens per document
N <- sum(doc.length)  # total number of tokens in the data
term.frequency <- as.integer(term.table)  # frequencies of terms in the corpus
K <- 10
G <- 1000
alpha <- 0.02
eta <- 0.02
library(lda)
set.seed(357)
t1 <- Sys.time()
fit <- lda.collapsed.gibbs.sampler(documents = documents, K = K, vocab = vocab,
num.iterations = G, alpha = alpha,
eta = eta, initial = NULL, burnin = 0,
compute.log.likelihood = TRUE)
t2 <- Sys.time()
t2 - t1  # about 24 minutes on laptop
theta <- t(apply(fit$document_sums + alpha, 2, function(x) x/sum(x)))
phi <- t(apply(t(fit$topics) + eta, 2, function(x) x/sum(x)))
RED_dreamldavis <- list(phi = phi,
theta = theta,
doc.length = doc.length,
vocab = vocab,
term.frequency = term.frequency)
json <- createJSON(phi = RED_dreamldavis$phi,
theta = RED_dreamldavis$theta,
doc.length = RED_dreamldavis$doc.length,
vocab = RED_dreamldavis$vocab,
term.frequency = RED_dreamldavis$term.frequency)
serVis(json, out.dir = 'vis')
serVis(json, out.dir = 'vis')
K <- 20
G <- 1000
alpha <- 0.02
eta <- 0.02
library(lda)
set.seed(357)
t1 <- Sys.time()
fit <- lda.collapsed.gibbs.sampler(documents = documents, K = K, vocab = vocab,
num.iterations = G, alpha = alpha,
eta = eta, initial = NULL, burnin = 0,
compute.log.likelihood = TRUE)
K <- 20
G <- 1000
alpha <- 0.02
eta <- 0.02
library(lda)
set.seed(357)
t1 <- Sys.time()
fit <- lda.collapsed.gibbs.sampler(documents = documents, K = K, vocab = vocab,
num.iterations = G, alpha = alpha,
eta = eta, initial = NULL, burnin = 0,
compute.log.likelihood = TRUE)
t2 <- Sys.time()
t2 - t1  # about 24 minutes on laptop
library(jiebaR)
