{
    "collab_server" : "",
    "contents" : "## 红楼梦文本挖掘之数据预处理####\n## 主要用于文本文档的读取和构建\n## 分析与挖掘R中的人物关系\n## 红楼梦中关键人物的社交网络\n## 孙玉林；2016年10月31\n\n\n## 如果在每个段落中人物同时出现，则频数权重加1\n\n## 加载所需要的包\nlibrary(igraph)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(networkD3)\n\n## 读取数据\n## 一共有149人出现的频次多余10次\nRed_net <- read.csv(\"./数据/社交网络权重.csv\")\nRed_net[,1:2] <- apply(Red_net[,1:2],2,as.character)\nName_freq <- read.csv(\"./数据/红楼梦人物出现频次.csv\")\nName_freq <- Name_freq[Name_freq$word %in%(union(unique(Red_net$First),\n                                                 unique(Red_net$Second))),]\nName_freq$word <- as.character(Name_freq$word)\n# union(unique(Red_net$First),unique(Red_net$Second))\n\n## 可视化人出现的频次\np1 <- ggplot(Name_freq,aes(x = reorder(word,freq),y = freq)) +\n  theme_bw(base_size = 9,base_family = \"STKaiti\")+\n  geom_bar(stat = \"identity\",position = \"dodge\",fill = \"lightblue\") +\n  theme(axis.text.x = element_text(size = 5,hjust = 1,angle = 90,vjust = 0.5),\n        axis.title.x = element_blank()) +\n  labs(x = \"\",y = \"频数\",title = \"《红楼梦》中关键人物出现次数\")\n\np2 <- ggplot(Name_freq[Name_freq$freq>80,],aes(x = reorder(word,freq),y = freq)) +\n  theme_bw(base_size = 9,base_family = \"STKaiti\")+\n  geom_bar(stat = \"identity\",position = \"dodge\",fill = \"lightblue\") +\n  theme(axis.text.x = element_text(size = 9,hjust = 1,angle = 90,vjust = 0.5)) +\n  labs(x = \"人名\",y = \"频数\")\n\ngrid.arrange(p1,p2,nrow = 2)\n\n\n## -----------------------------------------------------------------\n## 按照权重1，即章节权重分析人物的社交网络####\n# 1:准备社交网络数据\nchap_net <- Red_net[Red_net$chapweight > 10,c(1,2,3)]\nnames(chap_net) <- c(\"from\",\"to\",\"weight\")\n\nchap_vert <- Name_freq[Name_freq$word %in% as.character(union(unique(chap_net$from),\n                   unique(chap_net$to))),]\n\nchap_net <- graph_from_data_frame(chap_net,directed = FALSE,\n                                  vertices = chap_vert)\nchap_net\nchap_net$name <- \"《红楼梦》章节人物关系\"\nV(chap_net)$media\n## 节点数目\nvcount(chap_net)\n## 边的数目\necount(chap_net)\n## 简化网络图\nchap_net <- simplify(chap_net,remove.multiple = TRUE,remove.loops = TRUE,\n                     edge.attr.comb = \"mean\")\n\n## 查看节点的度\ndegrees <- data.frame(name = names(degree(chap_net)),\n                      counts = (degree(chap_net)))\n\nggplot(degrees,aes(x = reorder(name,counts),y = counts)) +\n  theme_bw(base_size = 11,base_family = \"STKaiti\")+\n  geom_bar(stat = \"identity\",position = \"dodge\",fill = \"lightblue\") +\n  theme(axis.text.x = element_text(size = 5,hjust = 1,angle = 90,vjust = 0.5),\n        axis.title.x = element_blank()) +\n  labs(x = \"人名\",y = \"节点的度\",title = \"《红楼梦》\")\n\n## 判断事否为联通图\nis.connected(chap_net)\n\n## 计算图的直径\ndiameter(chap_net,directed = FALSE)\n\n## \nset.seed(1234)\npar(cex = 0.8,family = \"STKaiti\")\n## 设置图层\nlayout1 <- layout.lgl(chap_net)\nlayout2 <- layout.kamada.kawai(chap_net)\nlayout3 <- layout.reingold.tilford(chap_net)\nlayout4 <- layout.fruchterman.reingold(chap_net)\n\n#V(chap_net)$size <- Name_freq$freq/10\n## 设置节点的字体\nV(chap_net)$label.family <- \"STKaiti\"\nE(chap_net)$width <- log10(E(chap_net)$weight) *2\negam <- (E(chap_net)$width) / max(E(chap_net)$width)\nE(chap_net)$color <- rgb(1,0.5,0.5,egam)\nV(chap_net)$size <- log(V(chap_net)$freq) * 2.5\nplot(chap_net,layout = layout1,main = \"《红楼梦》根据章节部分人物关系\")\nplot(chap_net,layout = layout2,main = \"《红楼梦》根据章节部分人物关系\")\nplot(chap_net,layout = layout3,main = \"《红楼梦》根据章节部分人物关系\")\nplot(chap_net,layout = layout4,main = \"《红楼梦》根据章节部分人物关系\")\n\n\n## -----------------------------------------------------------------\n## 按照权重2，即段落权重分析人物的社交网络####\n# 1:准备社交网络数据\nchap_net <- Red_net[Red_net$duanweight > 10,c(1,2,4)]\nnames(chap_net) <- c(\"from\",\"to\",\"weight\")\n\nchap_vert <- Name_freq[Name_freq$word %in% as.character(union(unique(chap_net$from),\n                                                              unique(chap_net$to))),]\n\nchap_net <- graph_from_data_frame(chap_net,directed = FALSE,\n                                  vertices = chap_vert)\nchap_net\nchap_net$name <- \"《红楼梦》章节人物关系\"\nV(chap_net)$media\n## 节点数目\nvcount(chap_net)\n## 边的数目\necount(chap_net)\n## 简化网络图\nchap_net <- simplify(chap_net,remove.multiple = TRUE,remove.loops = TRUE,\n                     edge.attr.comb = \"mean\")\n\n## 查看节点的度\ndegrees <- data.frame(name = names(degree(chap_net)),\n                      counts = (degree(chap_net)))\n\nggplot(degrees,aes(x = reorder(name,counts),y = counts)) +\n  theme_bw(base_size = 11,base_family = \"STKaiti\")+\n  geom_bar(stat = \"identity\",position = \"dodge\",fill = \"lightblue\") +\n  theme(axis.text.x = element_text(size = 5,hjust = 1,angle = 90,vjust = 0.5),\n        axis.title.x = element_blank()) +\n  labs(x = \"人名\",y = \"节点的度\",title = \"《红楼梦》\")\n\n## 判断事否为联通图\nis.connected(chap_net)\n\n## 计算图的直径\ndiameter(chap_net,directed = FALSE)\n\n## \nset.seed(1234)\npar(cex = 0.8,family = \"STKaiti\")\n## 设置图层\nlayout1 <- layout.lgl(chap_net)\nlayout2 <- layout.kamada.kawai(chap_net)\nlayout3 <- layout.reingold.tilford(chap_net)\nlayout4 <- layout.fruchterman.reingold(chap_net)\n\n#V(chap_net)$size <- Name_freq$freq/10\n## 设置节点的字体\nV(chap_net)$label.family <- \"STKaiti\"\nE(chap_net)$width <- log10(E(chap_net)$weight) *2\negam <- (E(chap_net)$width) / max(E(chap_net)$width)\nE(chap_net)$color <- rgb(1,0.5,0.5,egam)\nV(chap_net)$size <- log(V(chap_net)$freq) * 2.5\nplot(chap_net,layout = layout1,main = \"《红楼梦》根据段落部分人物关系\")\nplot(chap_net,layout = layout2,main = \"《红楼梦》根据段落部分人物关系\")\nplot(chap_net,layout = layout3,main = \"《红楼梦》根据段落部分人物关系\")\nplot(chap_net,layout = layout4,main = \"《红楼梦》根据段落部分人物关系\")\n\n\n\n## -----------------------------------------------------------------\n## 按照权重2，即段落权重分析人物的社交网络####\n## 分析链接次数较大的人物\n# 1:准备社交网络数据\nchap_net <- Red_net[Red_net$duanweight > 50,c(1,2,4)]\nnames(chap_net) <- c(\"from\",\"to\",\"weight\")\n\nchap_vert <- Name_freq[Name_freq$word %in% as.character(union(unique(chap_net$from),\n                                                              unique(chap_net$to))),]\n\nchap_net <- graph_from_data_frame(chap_net,directed = FALSE,\n                                  vertices = chap_vert)\nchap_net\nchap_net$name <- \"《红楼梦》章节人物关系\"\nV(chap_net)$media\n## 节点数目\nvcount(chap_net)\n## 边的数目\necount(chap_net)\n## 简化网络图\nchap_net <- simplify(chap_net,remove.multiple = TRUE,remove.loops = TRUE,\n                     edge.attr.comb = \"mean\")\n\n## 查看节点的度\ndegrees <- data.frame(name = names(degree(chap_net)),\n                      counts = (degree(chap_net)))\n\nggplot(degrees,aes(x = reorder(name,counts),y = counts)) +\n  theme_bw(base_size = 11,base_family = \"STKaiti\")+\n  geom_bar(stat = \"identity\",position = \"dodge\",fill = \"lightblue\") +\n  theme(axis.text.x = element_text(size = 5,hjust = 1,angle = 90,vjust = 0.5),\n        axis.title.x = element_blank()) +\n  labs(x = \"人名\",y = \"节点的度\",title = \"《红楼梦》\")\n\n## 判断事否为联通图\nis.connected(chap_net)\n\n## 计算图的直径\ndiameter(chap_net,directed = FALSE)\n\n## \nset.seed(1234)\npar(cex = 0.8,family = \"STKaiti\")\n## 设置图层\nlayout1 <- layout.lgl(chap_net)\nlayout2 <- layout.kamada.kawai(chap_net)\nlayout3 <- layout.reingold.tilford(chap_net)\nlayout4 <- layout.fruchterman.reingold(chap_net)\n\n#V(chap_net)$size <- Name_freq$freq/10\n## 设置节点的字体\nV(chap_net)$label.family <- \"STKaiti\"\nE(chap_net)$width <- log10(E(chap_net)$weight) *2\negam <- (E(chap_net)$width) / max(E(chap_net)$width)\nE(chap_net)$color <- rgb(1,0.5,0.5,egam)\nV(chap_net)$size <- log(V(chap_net)$freq) * 2.5\nplot(chap_net,layout = layout1,main = \"《红楼梦》根据段落部分人物关系\")\nplot(chap_net,layout = layout2,main = \"《红楼梦》根据段落部分人物关系\")\nplot(chap_net,layout = layout3,main = \"《红楼梦》根据段落部分人物关系\")\nplot(chap_net,layout = layout4,main = \"《红楼梦》根据段落部分人物关系\")\n\n\n\n##-------------------------------------------------------------------\nlibrary(networkD3)\nlibrary(igraph)\n\n# Basic Graph\nchap_net <- Red_net[Red_net$duanweight > 40,c(1,2,4)]\ng <- graph.data.frame(chap_net, directed=F) # raw graph\n\n\n## Make a vertices df\nvertices<-data.frame(\n  name = V(g)$name,\n  group = edge.betweenness.community(g)$membership,\n  betweenness = (betweenness(g,directed=F,normalized=T)*115)+0.1 #so size isn't tiny\n) \n#nb. can also adjust nodesize with `radiusCalculation`\n\n# create indices (indexing needs to be JS format)\nchap_net$source.index = match(chap_net$First, vertices$name)-1\nchap_net$target.index = match(chap_net$Second, vertices$name)-1\n\n\n# supply a edgelist + nodelist\nd3 = forceNetwork(Links = chap_net, Nodes = vertices,\n                  Source = 'source.index', Target = 'target.index',\n                  NodeID = 'name',\n                  Group = 'group', # color nodes by group calculated earlier\n                  charge = -200, # node repulsion\n                  linkDistance = 20,\n                  zoom = T, \n                  opacity = 1,\n                  fontSize=24)\n\nshow(d3)\n\n##-------------------------------------------------------------------\n\n# Basic Graph\nchap_net <- Red_net[Red_net$duanweight > 60,c(1,2,4)]\ng <- graph.data.frame(chap_net, directed=F) # raw graph\n\n\n## Make a vertices df\nvertices<-data.frame(\n  name = V(g)$name,\n  group = edge.betweenness.community(g)$membership,\n  betweenness = (betweenness(g,directed=F,normalized=T)*115)+0.1 #so size isn't tiny\n) \n#nb. can also adjust nodesize with `radiusCalculation`\n\n# create indices (indexing needs to be JS format)\nchap_net$source.index = match(chap_net$First, vertices$name)-1\nchap_net$target.index = match(chap_net$Second, vertices$name)-1\n\n\n# supply a edgelist + nodelist\nd3 = forceNetwork(Links = chap_net, Nodes = vertices,\n                  Source = 'source.index', Target = 'target.index',\n                  NodeID = 'name',\n                  Group = 'group', # color nodes by group calculated earlier\n                  charge = -200, # node repulsion\n                  linkDistance = 20,\n                  zoom = T, \n                  opacity = 1,\n                  fontSize=24)\n\nshow(d3)\n",
    "created" : 1479253600745.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1075231914",
    "id" : "E4806A78",
    "lastKnownWriteTime" : 1478655397,
    "last_content_update" : 1478655397,
    "path" : "~/数据分析/红楼梦文本挖掘/The Dream of the Red Chamber/Red_man_social_net.R",
    "project_path" : "Red_man_social_net.R",
    "properties" : {
        "notebook_format" : "html_document",
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}